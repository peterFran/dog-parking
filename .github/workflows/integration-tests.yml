name: Integration Tests with Ephemeral Environment

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    environment: staging
    
    env:
      # Create unique stack name for this test run
      TEST_STACK_NAME: dog-care-test-${{ github.run_id }}
      TEST_PROJECT_ID: demo-dog-care
      FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Setup Node.js for Firebase CLI
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Build SAM application
        run: sam build --use-container
      
      - name: Deploy ephemeral test environment
        run: |
          echo "Deploying test stack: ${{ env.TEST_STACK_NAME }}"
          
          # Use the same bucket pattern as staging deployment
          # Based on staging logs: dog-care-sam-deployments-20250713-51
          BUCKET_NAME="dog-care-sam-deployments-$(date +%Y%m%d)-${{ github.run_number }}"
          echo "ðŸ“¦ Using S3 bucket: $BUCKET_NAME"
          
          # Try to reuse an existing bucket from staging first
          EXISTING_BUCKET_BASE="dog-care-sam-deployments-$(date +%Y%m%d)"
          
          # Look for any existing bucket with today's date
          for i in {1..100}; do
            TEST_BUCKET="${EXISTING_BUCKET_BASE}-${i}"
            if aws s3 ls "s3://$TEST_BUCKET" >/dev/null 2>&1; then
              echo "âœ… Found existing bucket: $TEST_BUCKET"
              BUCKET_NAME="$TEST_BUCKET"
              break
            fi
          done
          
          echo "ðŸ“¦ Final bucket choice: $BUCKET_NAME"
          
          sam deploy \
            --template-file .aws-sam/build/template.yaml \
            --stack-name ${{ env.TEST_STACK_NAME }} \
            --parameter-overrides "Environment=test GoogleProjectId=${{ env.TEST_PROJECT_ID }}" \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset \
            --s3-bucket $BUCKET_NAME \
            --debug
      
      - name: Get API endpoint from stack
        id: get-api-url
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.TEST_STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`DogCareApiUrl`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT
          echo "Test API URL: $API_URL"
      
      - name: Start Firebase Auth Emulator
        run: |
          echo "Starting Firebase Auth emulator..."
          firebase emulators:start --only auth --project ${{ env.TEST_PROJECT_ID }} &
          
          # Wait for emulator to be ready
          echo "Waiting for Firebase emulator to start..."
          timeout 60 bash -c 'until curl -s http://localhost:9099/ > /dev/null; do sleep 2; done'
          echo "Firebase emulator is ready"
      
      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to be ready..."
          timeout 300 bash -c 'until curl -s "${{ steps.get-api-url.outputs.API_URL }}/venues" > /dev/null; do sleep 10; done'
          echo "API is ready"
      
      - name: Run integration tests
        env:
          API_BASE_URL: ${{ steps.get-api-url.outputs.API_URL }}
          FIREBASE_AUTH_EMULATOR_HOST: ${{ env.FIREBASE_AUTH_EMULATOR_HOST }}
        run: |
          echo "Running integration tests against: $API_BASE_URL"
          python -m pytest tests/integration/test_api_with_firebase_emulator.py -v --tb=short
      
      - name: Cleanup - Stop Firebase emulator
        if: always()
        run: |
          echo "Stopping Firebase emulator..."
          pkill -f "firebase emulators" || true
      
      - name: Cleanup - Delete test stack
        if: always()
        run: |
          echo "Deleting test stack: ${{ env.TEST_STACK_NAME }}"
          aws cloudformation delete-stack \
            --stack-name ${{ env.TEST_STACK_NAME }} \
            --region ${{ env.AWS_REGION }}
          
          echo "Waiting for stack deletion to complete..."
          aws cloudformation wait stack-delete-complete \
            --stack-name ${{ env.TEST_STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --cli-read-timeout 0 \
            --cli-connect-timeout 60 || true
          
          echo "Stack deletion completed"
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ github.run_id }}
          path: |
            test-results/
            htmlcov/
          retention-days: 7